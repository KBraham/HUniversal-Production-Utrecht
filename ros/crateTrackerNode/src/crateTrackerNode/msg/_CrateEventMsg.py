"""autogenerated by genpy from crateTrackerNode/CrateEventMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import crateTrackerNode.msg

class CrateEventMsg(genpy.Message):
  _md5sum = "6b500960da51dca57ed218064ab17547"
  _type = "crateTrackerNode/CrateEventMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 event
CrateMsg crate

================================================================================
MSG: crateTrackerNode/CrateMsg
string name
float32 x
float32 y
float32 angle


"""
  __slots__ = ['event','crate']
  _slot_types = ['int32','crateTrackerNode/CrateMsg']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       event,crate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CrateEventMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.event is None:
        self.event = 0
      if self.crate is None:
        self.crate = crateTrackerNode.msg.CrateMsg()
    else:
      self.event = 0
      self.crate = crateTrackerNode.msg.CrateMsg()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.event))
      _x = self.crate.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3f.pack(_x.crate.x, _x.crate.y, _x.crate.angle))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.crate is None:
        self.crate = crateTrackerNode.msg.CrateMsg()
      end = 0
      start = end
      end += 4
      (self.event,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.crate.name = str[start:end].decode('utf-8')
      else:
        self.crate.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.crate.x, _x.crate.y, _x.crate.angle,) = _struct_3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.event))
      _x = self.crate.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3f.pack(_x.crate.x, _x.crate.y, _x.crate.angle))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.crate is None:
        self.crate = crateTrackerNode.msg.CrateMsg()
      end = 0
      start = end
      end += 4
      (self.event,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.crate.name = str[start:end].decode('utf-8')
      else:
        self.crate.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.crate.x, _x.crate.y, _x.crate.angle,) = _struct_3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_3f = struct.Struct("<3f")
